{"version":3,"sources":["../src/to-iso-string-x.js"],"names":[],"mappings":"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","file":"to-iso-string-x.esm.js","sourcesContent":["import attempt from 'attempt-x';\nimport isDate from 'is-date-object';\nimport padStart from 'string-pad-start-x';\nimport map from 'array-map-x';\nimport arraySlice from 'array-slice-x';\nimport isFinite from 'is-finite-x';\n\nconst nativeToISOString = typeof Date.prototype.toISOString === 'function' && Date.prototype.toISOString;\n\nlet isWorking;\n\nif (nativeToISOString) {\n  let res = attempt.call(new Date(0), nativeToISOString);\n  isWorking = res.threw === false && res.value === '1970-01-01T00:00:00.000Z';\n\n  if (isWorking) {\n    res = attempt.call(new Date(-62198755200000), nativeToISOString);\n    isWorking = res.threw === false && res.value.indexOf('-000001') > -1;\n  }\n\n  if (isWorking) {\n    res = attempt.call(new Date(-1), nativeToISOString);\n    isWorking = res.threw === false && res.value === '1969-12-31T23:59:59.999Z';\n  }\n}\n\n/**\n * This method returns a string in simplified extended ISO format (ISO 8601),\n * which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or\n * Â±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC\n * offset, as denoted by the suffix \"Z\".\n *\n * @param {object} date - A Date object.\n * @throws {TypeError} If date is not a Date object.\n * @throws {RangeError} If date is invalid.\n * @returns {string} Given date in the ISO 8601 format according to universal time.\n */\nlet $toISOString;\n\nif (isWorking) {\n  $toISOString = function toISOString(date) {\n    return nativeToISOString.call(date);\n  };\n} else {\n  const {join} = Array.prototype;\n\n  $toISOString = function toISOString(date) {\n    if (isDate(date) === false) {\n      throw new TypeError('toISOString called on incompatible receiver.');\n    }\n\n    if (isFinite(date) === false || isFinite(date.getTime()) === false) {\n      // Adope Photoshop requires the second check.\n      throw new RangeError('toISOString called on non-finite value.');\n    }\n\n    let year = date.getUTCFullYear();\n    let month = date.getUTCMonth();\n    // see https://github.com/es-shims/es5-shim/issues/111\n    /* eslint-disable-next-line no-bitwise */\n    year += (month / 12) >> 0; // floor\n    month = ((month % 12) + 12) % 12;\n\n    // the date time string format is specified in 15.9.1.15.\n    const parts = [month + 1, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds()];\n\n    let sign;\n\n    if (year < 0) {\n      sign = '-';\n    } else if (year > 9999) {\n      sign = '+';\n    } else {\n      sign = '';\n    }\n\n    year = sign + padStart(Math.abs(year), sign ? 6 : 4, '0');\n    const result = map(parts, function _mapper(item) {\n      // pad months, days, hours, minutes, and seconds to have two digits.\n      return padStart(item, 2, '0');\n    });\n\n    const dateStr = `${year}-${join.call(arraySlice(result, 0, 2), '-')}`;\n    // pad milliseconds to have three digits.\n    const msStr = padStart(date.getUTCMilliseconds(), 3, '0');\n    const timeStr = `${join.call(arraySlice(result, 2), ':')}.${msStr}`;\n\n    return `${dateStr}T${timeStr}Z`;\n  };\n}\n\nconst tis = $toISOString;\n\nexport default tis;\n"]}