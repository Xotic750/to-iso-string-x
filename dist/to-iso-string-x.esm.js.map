{"version":3,"sources":["../src/to-iso-string-x.js"],"names":[],"mappings":"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","file":"to-iso-string-x.esm.js","sourcesContent":["import attempt from 'attempt-x';\nimport isDate from 'is-date-object';\nimport padStart from 'string-pad-start-x';\nimport map from 'array-map-x';\nimport arraySlice from 'array-slice-x';\nimport toBoolean from 'to-boolean-x';\n\n/* eslint-disable-next-line no-restricted-globals */\nconst globalIsFinite = isFinite;\nconst {abs} = Math;\nconst {\n  toISOString: ntis,\n  getTime,\n  getUTCFullYear,\n  getUTCMonth,\n  getUTCDate,\n  getUTCHours,\n  getUTCMinutes,\n  getUTCSeconds,\n  getUTCMilliseconds,\n} = Date.prototype;\nconst nativeToISOString = typeof ntis === 'function' && ntis;\nconst {join} = [];\n\nconst test1 = function test1() {\n  const res = attempt.call(new Date(0), nativeToISOString);\n\n  return res.threw === false && res.value === '1970-01-01T00:00:00.000Z';\n};\n\nconst test2 = function test2() {\n  const res = attempt.call(new Date(-62198755200000), nativeToISOString);\n\n  return res.threw === false && res.value.indexOf('-000001') > -1;\n};\n\nconst test3 = function test3() {\n  const res = attempt.call(new Date(-1), nativeToISOString);\n\n  return res.threw === false && res.value === '1969-12-31T23:59:59.999Z';\n};\n\nconst isWorking = toBoolean(nativeToISOString) && test1() && test2() && test3();\n\nconst assertIsDate = function assertIsDate(date) {\n  if (isDate(date) === false) {\n    throw new TypeError('toISOString called on incompatible receiver.');\n  }\n\n  return date;\n};\n\nconst assertAdobe = function assertAdobe(date) {\n  if (globalIsFinite(date) === false || globalIsFinite(getTime.call(date)) === false) {\n    // Adobe Photoshop requires the second check.\n    throw new RangeError('toISOString called on non-finite value.');\n  }\n\n  return date;\n};\n\nconst stringify = function stringify(date, month, year) {\n  // the date time string format is specified in 15.9.1.15.\n  const parts = [month + 1, getUTCDate.call(date), getUTCHours.call(date), getUTCMinutes.call(date), getUTCSeconds.call(date)];\n\n  const result = map(parts, function iteratee(item) {\n    // pad months, days, hours, minutes, and seconds to have two digits.\n    return padStart(item, 2, '0');\n  });\n\n  const dateStr = `${year}-${join.call(arraySlice(result, 0, 2), '-')}`;\n  // pad milliseconds to have three digits.\n  const msStr = padStart(getUTCMilliseconds.call(date), 3, '0');\n  const timeStr = `${join.call(arraySlice(result, 2), ':')}.${msStr}`;\n\n  return `${dateStr}T${timeStr}Z`;\n};\n\nconst wrappedToISOString = function wrappedToISOString() {\n  return function toISOString(date) {\n    assertIsDate(date);\n    assertAdobe(date);\n\n    return nativeToISOString.call(date);\n  };\n};\n\nconst getSign = function getSign(year) {\n  if (year < 0) {\n    return '-';\n  }\n\n  if (year > 9999) {\n    return '+';\n  }\n\n  return '';\n};\n\nconst patchedToISOString = function patchedToISOString() {\n  return function toISOString(date) {\n    assertIsDate(date);\n    assertAdobe(date);\n\n    let year = getUTCFullYear.call(date);\n    let month = getUTCMonth.call(date);\n    // see https://github.com/es-shims/es5-shim/issues/111\n    /* eslint-disable-next-line no-bitwise */\n    year += (month / 12) >> 0; // floor\n    month = ((month % 12) + 12) % 12;\n\n    const sign = getSign(year);\n\n    year = sign + padStart(abs(year), sign ? 6 : 4, '0');\n\n    return stringify(date, month, year);\n  };\n};\n\n/**\n * This method returns a string in simplified extended ISO format (ISO 8601),\n * which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or\n * Â±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC\n * offset, as denoted by the suffix \"Z\".\n *\n * @param {object} date - A Date object.\n * @throws {TypeError} If date is not a Date object.\n * @throws {RangeError} If date is invalid.\n * @returns {string} Given date in the ISO 8601 format according to universal time.\n */\nconst $toISOString = isWorking ? wrappedToISOString() : patchedToISOString();\n\nexport default $toISOString;\n"]}